#ifndef QUICKREFOLD_SRC_BASECORRECTOR_ICC_
#define QUICKREFOLD_SRC_BASECORRECTOR_ICC_
#include <stdexcept>

#include "TAxis.h"
#include "TH1F.h"
#include "TH2F.h"
#include "TClass.h"
#include "../interface/BaseCorrector.h"

namespace QuickRefold {
template<typename data>
BaseCorrector<data>::BaseCorrector() : nAxes(0), axes(0), values(0),
     status(NONE),
     nBins(0), metrics(0),binCache(0)
 {};

template<typename data>
BaseCorrector<data>::BaseCorrector(int numAxes) : nAxes(numAxes), axes(new TAxis [nAxes]),  values(0),
    status(SETUP), nBins(0),metrics(new unsigned int [nAxes]),binCache(new std::vector<unsigned int>(nAxes,1u))
{};

template<typename data>
BaseCorrector<data>::~BaseCorrector(){
    delete [] metrics;
    delete [] axes;
    delete [] values;
    delete binCache;
  };

  //Functions to access values and errors
template<typename data>
  const data& BaseCorrector<data>::getValue(const float& input) const {
    if(nAxes != 1) throw std::invalid_argument("This version of BaseCorrector<data>::getValue assumes only one axis");
    binCache->at(0) = findAxisBin(0,input);
    return values[getBin(*binCache)];
  }
template<typename data>
  const data& BaseCorrector<data>::getValue(const float& input0, const float& input1) const {
    if(nAxes != 2) throw std::invalid_argument("This version of BaseCorrector<data>::getValue assumes two axes");
    binCache->at(0) = findAxisBin(0,input0);
    binCache->at(1) = findAxisBin(1,input1);
    return values[getBin(*binCache)];
  }
template<typename data>
  void BaseCorrector<data>::setBin(const unsigned int& axis, const float& input) const{
    if(axis >= nAxes) throw std::invalid_argument(TString::Format("BaseCorrector<data>::setBin: tried to access axis %u but only %u exist.",axis,nAxes).Data());
    setBinValFast(axis,input);
  }
template<typename data>
  const data& BaseCorrector<data>::getValue() const {
    return values[getBin(*binCache)];
  }
template<typename data>
  const data& BaseCorrector<data>::getValue(const std::vector<unsigned int>& bins ) const {
    if(bins.size() != nAxes) throw std::invalid_argument(TString::Format("BaseCorrector<data>::getValue: tried to access %lu axes but the structure contains %u",bins.size(),nAxes).Data());
    return values[getBin(bins)];
  }

  //Functions to access the axes
template<typename data>
  const TAxis * BaseCorrector<data>::getAxis(unsigned int axis) const {
    if(axis >= nAxes) throw std::invalid_argument(TString::Format("BaseCorrector<data>::getAxis: tried to access axis %u but only %u exist.",axis,nAxes).Data());
    return &axes[axis];
  }
template<typename data>
  int BaseCorrector<data>::findAxis(const TString& axisName) const{
    for(unsigned int iA = 0; iA < nAxes; ++iA){
      if(!axisName.EqualTo(axes[iA].GetName())) continue;
      return iA;
    }
    return -1;
  }
template<typename data>
  unsigned int BaseCorrector<data>::findAxisBin(unsigned int axis, double input) const {
    if(axis >= nAxes) throw std::invalid_argument(TString::Format("BaseCorrector<data>::findAxisBin: tried to access axis %u but only %u exist.",axis,nAxes).Data());
    return findAxisBin(axes[axis],input);
  }
template<typename data>
  unsigned int BaseCorrector<data>::findAxisBin(const TAxis& axis, double input) const {
    unsigned int bin;
    double xMin = axis.GetXmin();
    double xMax = axis.GetXmax();
    unsigned int nBins = axis.GetNbins();
    if(input < xMin){
      bin = 1;
    } else if( !(input < xMax)){
      bin = nBins;
    } else {
      if (!axis.IsVariableBinSize()) {
        bin = 1 + int (nBins*(input-xMin)/(xMax-xMin) );
      } else {
        bin = 1 + TMath::BinarySearch(axis.GetXbins()->fN,axis.GetXbins()->fArray,input);
      }
    }
    return bin;
  }
template<typename data>
  TString BaseCorrector<data>::getAxisBinTitle(unsigned int axis, float input) const {
    return getAxisBinTitle(axis,findAxisBin(axis,input));
  }
template<typename data>
  TString BaseCorrector<data>::getAxisBinTitle(unsigned int axis, unsigned int bin) const {
    if(axis >= nAxes) throw std::invalid_argument(TString::Format("BaseCorrector<data>::getAxisBinTitle: tried to access axis %u but only %u exist.",axis,nAxes).Data());
    if (bin <= 1)             return TString::Format("< %.4g", axes[axis].GetBinUpEdge(1));
    if (int(bin) >= axes[axis].GetNbins())  return TString::Format("%.4g #leq" , axes[axis].GetBinLowEdge(axes[axis].GetNbins()) );
    return TString::Format("%.4g - %.4g", axes[axis].GetBinLowEdge(bin), axes[axis].GetBinLowEdge(bin));
  }


  //Functions to print or draw the stored values
template<typename data>
  TString BaseCorrector<data>::getBinTitle(unsigned int iB) const{
    TString title;
    fillBinCache(iB);
    for(unsigned int iA = 0; iA < nAxes; ++iA){
      title += "(";
      title +=  getAxisBinTitle(iA,binCache->at(iA)) ;
      title +=")";
    }
    return title;
  }
  //Functions to fill the object
template<typename data>
  void BaseCorrector<data>::addAxis(unsigned int axis, const char *name, unsigned int nBins, float minAxis, float maxAxis) {
    if(status != SETUP) throw std::invalid_argument("BaseCorrector<data>::addAxis: Not in SETUP mode." );
    if(axis >= nAxes) throw std::invalid_argument(TString::Format("BaseCorrector<data>::addAxis: tried to setup axis %u but only %u exist.",axis,nAxes).Data());
    axes[axis].Set(nBins,minAxis,maxAxis);
    axes[axis].SetName(name);
  }
template<typename data>
  void BaseCorrector<data>::addAxis(unsigned int axis,const char *name, unsigned int nBins, float* axisValues){
    if(status != SETUP) throw std::invalid_argument("BaseCorrector<data>::addAxis: Not in SETUP mode." );
    if(axis >= nAxes) throw std::invalid_argument(TString::Format("BaseCorrector<data>::addAxis: tried to setup axis %u but only %u exist.",axis,nAxes).Data());
    axes[axis].Set(nBins,axisValues);
    axes[axis].SetName(name);
  }
template<typename data>
  void BaseCorrector<data>::addAxis(unsigned int axis, const TAxis * inAxis){
    if(status != SETUP) throw std::invalid_argument("BaseCorrector<data>::addAxis: Not in SETUP mode." );
    if(axis >= nAxes) throw std::invalid_argument(TString::Format("BaseCorrector<data>::addAxis: tried to setup axis %u but only %u exist.",axis,nAxes).Data());
    axes[axis] = *inAxis;
  }
template<typename data>
  void BaseCorrector<data>::stopSetup(bool setupOnlyAxes) {
    if(status != SETUP) throw std::invalid_argument("BaseCorrector<data>::stopSetup: Not in SETUP mode." );
    status = FILLING;

    nBins = 1;
    metrics[0] = 1;
    for(unsigned int iA = 0; iA < nAxes;){
      if(!axes[iA].GetName()[0]) throw std::invalid_argument("BaseCorrector<data>::stopSetup: Not all axes have been setup." );
      nBins *= axes[iA].GetNbins();
      if (++iA < nAxes)
        metrics[iA] = nBins;
    }
    if(setupOnlyAxes) return;

    values = new data[nBins];
  }
template<typename data>
  void BaseCorrector<data>::setValue(const data& in){
    if(status != FILLING) throw std::invalid_argument("BaseCorrector<data>::setValue: Not in FILLING mode." );
    int bin = getBin(*binCache);
    values[bin] = in;
  }
template<typename data>
  void BaseCorrector<data>::setValue(unsigned int bin, const data& in){
    if(status != FILLING) throw std::invalid_argument("BaseCorrector<data>::setValue: Not in FILLING mode." );
    if(bin >= nBins) throw std::invalid_argument(TString::Format("BaseCorrector<data>::setValue: %u out of bounds (%u)",bin,nBins ).Data());
    values[bin] = in;
  }
template<typename data>
  void BaseCorrector<data>::setValues(const std::vector<data>& inValues){
    if(status != FILLING) throw std::invalid_argument("BaseCorrector<data>::setValues: Not in FILLING mode." );
    if(inValues.size() != nBins) throw std::invalid_argument(TString::Format("BaseCorrector<data>::setValues: Expect values with size %u, you gave %lu",nBins,inValues.size()).Data() );
    for(unsigned int iB = 0; iB < nBins; ++iB){
      values[iB] = inValues[iB];
    }
  }

  //helper functions
template<typename data>
  unsigned int BaseCorrector<data>::translateToBin(const std::vector<unsigned int>& inBins) const {
    if(inBins.size() != nAxes) throw std::invalid_argument(TString::Format("BaseCorrector<data>::translateToBin: Expect size %u, you gave %lu",nAxes,inBins.size()).Data() );
    return getBin(inBins);
  }
template<typename data>
  unsigned int BaseCorrector<data>::getBin(const std::vector<unsigned int>& inBins) const {
    unsigned int bin = 0;
    for(unsigned int iA = 0; iA < nAxes; ++iA)
      bin += metrics[iA] * (inBins[iA] -1);
    return bin;
  }
template<typename data>
  void BaseCorrector<data>::fillBinCache(unsigned int inBin) const {
    for(unsigned int iA = 0; iA < nAxes; ++iA){
      binCache->at(iA) = inBin % axes[iA].GetNbins() +1;
      inBin -= (binCache->at(iA) -1);
      inBin /= axes[iA].GetNbins();
    }
  }
}



#endif
